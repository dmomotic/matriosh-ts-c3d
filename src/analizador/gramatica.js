/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,37],$V2=[1,34],$V3=[1,35],$V4=[1,36],$V5=[1,30],$V6=[1,33],$V7=[1,31],$V8=[1,32],$V9=[1,40],$Va=[1,24],$Vb=[1,25],$Vc=[1,38],$Vd=[1,39],$Ve=[1,28],$Vf=[5,26,32,33,36,37,38,51,55,57,58,59,60,64,69,78,127,128,131],$Vg=[1,48],$Vh=[1,58],$Vi=[1,59],$Vj=[1,60],$Vk=[1,61],$Vl=[1,66],$Vm=[1,73],$Vn=[1,74],$Vo=[1,95],$Vp=[1,72],$Vq=[1,81],$Vr=[1,75],$Vs=[1,76],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[1,80],$Vx=[1,94],$Vy=[29,73],$Vz=[1,104],$VA=[1,111],$VB=[2,166],$VC=[1,117],$VD=[26,27,35,48,88,100,101,102,103,104,105,116],$VE=[5,26,32,33,36,37,38,51,55,57,58,59,60,64,65,69,78,127,128,131],$VF=[1,129],$VG=[1,130],$VH=[1,136],$VI=[1,135],$VJ=[1,131],$VK=[1,132],$VL=[1,133],$VM=[1,134],$VN=[1,137],$VO=[1,138],$VP=[1,139],$VQ=[1,140],$VR=[1,141],$VS=[1,142],$VT=[1,143],$VU=[28,29,36,47,48,56,73,76,77,89,90,91,92,93,94,95,96,97,98,99,126],$VV=[1,159],$VW=[5,26,27,32,33,35,36,37,38,48,51,55,57,58,59,60,64,69,78,88,100,101,102,103,104,105,116,127,128,131],$VX=[1,179],$VY=[1,176],$VZ=[1,175],$V_=[1,177],$V$=[1,178],$V01=[1,183],$V11=[1,188],$V21=[28,29,36,46,47,48,56,67,73,76,77,89,90,91,92,93,94,95,96,97,98,99,126],$V31=[1,193],$V41=[28,73,89],$V51=[28,29,36,47,48,56,73,76,77,89,90,91,92,94,95,96,97,98,99,126],$V61=[1,248],$V71=[28,29,35,36,46,73,77,88],$V81=[28,73],$V91=[1,256],$Va1=[28,29,36,46,47,48,56,67,73,76,77,88,89,90,91,92,93,94,95,96,97,98,99,126],$Vb1=[28,29,36,47,48,56,73,76,77,89,94,95,96,97,98,99,126],$Vc1=[28,29,36,56,73,76,77,89,94,95,96,97,98,99,126],$Vd1=[28,29,36,56,73,89,96,97,98,99,126],$Ve1=[1,296],$Vf1=[1,316],$Vg1=[1,317],$Vh1=[36,73],$Vi1=[1,339],$Vj1=[28,29,35,36,46,73,88],$Vk1=[36,55,57];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_VARIABLE":7,"DECLARACION_FUNCION":8,"DECLARACION_TYPE":9,"ASIGNACION":10,"PUSH_ARREGLO":11,"CONSOLE_LOG":12,"INSTRUCCION_IF":13,"SWITCH":14,"BREAK":15,"RETURN":16,"CONTINUE":17,"WHILE":18,"DO_WHILE":19,"FOR":20,"FOR_OF":21,"FOR_IN":22,"GRAFICAR_TS":23,"LLAMADA_FUNCION":24,"INCREMENTO_DECREMENTO":25,"id":26,"par_izq":27,"par_der":28,"punto_coma":29,"LISTA_EXPRESIONES":30,"LLAMADA_FUNCION_EXP":31,"graficar_ts":32,"while":33,"EXP":34,"llave_izq":35,"llave_der":36,"do":37,"for":38,"ASIGNACION_FOR":39,"TIPO_DEC_VARIABLE":40,"of":41,"in":42,"TIPO_IGUAL":43,"LISTA_ACCESOS_TYPE":44,"ACCESO_ARREGLO":45,"igual":46,"mas":47,"menos":48,"mas_mas":49,"menos_menos":50,"switch":51,"LISTA_CASE":52,"CASE":53,"DEFAULT":54,"case":55,"dos_puntos":56,"default":57,"continue":58,"break":59,"return":60,"IF":61,"ELSE":62,"LISTA_ELSE_IF":63,"if":64,"else":65,"ELSE_IF":66,"punto":67,"push":68,"function":69,"TIPO_VARIABLE_NATIVA":70,"LISTA_CORCHETES":71,"LISTA_PARAMETROS":72,"coma":73,"PARAMETRO":74,"Array":75,"menor":76,"mayor":77,"type":78,"LISTA_ATRIBUTOS":79,"ATRIBUTO":80,"LISTA_DECLARACIONES":81,"DEC_ID":82,"DEC_ID_TIPO":83,"DEC_ID_TIPO_CORCHETES":84,"DEC_ID_EXP":85,"DEC_ID_TIPO_EXP":86,"DEC_ID_TIPO_CORCHETES_EXP":87,"cor_izq":88,"cor_der":89,"por":90,"div":91,"mod":92,"potencia":93,"mayor_igual":94,"menor_igual":95,"igual_que":96,"dif_que":97,"and":98,"or":99,"not":100,"number":101,"string":102,"true":103,"false":104,"null":105,"LENGTH":106,"ARRAY_POP":107,"NEW_ARRAY":108,"ACCESO_TYPE":109,"TYPE":110,"TERNARIO":111,"CHAR_AT":112,"TO_LOWER_CASE":113,"TO_UPPER_CASE":114,"CONCAT":115,"new":116,"ATRIBUTOS_TYPE":117,"ATRIBUTO_TYPE":118,"length":119,"LISTA_ACCESOS_ARREGLO":120,"charat":121,"toLowerCase":122,"toUpperCase":123,"concat":124,"pop":125,"interrogacion":126,"let":127,"const":128,"boolean":129,"void":130,"console":131,"log":132,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",26:"id",27:"par_izq",28:"par_der",29:"punto_coma",32:"graficar_ts",33:"while",35:"llave_izq",36:"llave_der",37:"do",38:"for",41:"of",42:"in",46:"igual",47:"mas",48:"menos",49:"mas_mas",50:"menos_menos",51:"switch",55:"case",56:"dos_puntos",57:"default",58:"continue",59:"break",60:"return",64:"if",65:"else",67:"punto",68:"push",69:"function",73:"coma",75:"Array",76:"menor",77:"mayor",78:"type",82:"DEC_ID",85:"DEC_ID_EXP",88:"cor_izq",89:"cor_der",90:"por",91:"div",92:"mod",93:"potencia",94:"mayor_igual",95:"menor_igual",96:"igual_que",97:"dif_que",98:"and",99:"or",100:"not",101:"number",102:"string",103:"true",104:"false",105:"null",116:"new",119:"length",121:"charat",122:"toLowerCase",123:"toUpperCase",124:"concat",125:"pop",126:"interrogacion",127:"let",128:"const",129:"boolean",130:"void",131:"console",132:"log"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[24,4],[24,5],[31,3],[31,4],[23,4],[18,7],[19,9],[20,10],[20,10],[21,10],[22,10],[10,4],[10,5],[10,4],[43,1],[43,2],[43,2],[39,3],[39,2],[39,2],[14,7],[52,2],[52,1],[52,1],[52,2],[53,4],[54,3],[17,2],[15,2],[16,3],[16,2],[13,1],[13,2],[13,2],[13,3],[61,7],[62,4],[66,8],[63,2],[63,1],[11,7],[11,8],[8,9],[8,10],[8,7],[8,10],[8,11],[8,8],[72,3],[72,1],[74,3],[74,4],[74,6],[9,6],[9,7],[79,3],[79,1],[80,3],[80,4],[7,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,1],[81,1],[81,1],[81,1],[87,6],[86,5],[83,3],[84,4],[71,3],[71,2],[25,3],[25,3],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,3],[34,2],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[108,5],[110,3],[117,3],[117,1],[118,3],[106,3],[106,3],[106,5],[106,4],[106,4],[112,6],[112,6],[112,8],[113,5],[113,5],[113,7],[114,5],[114,5],[114,7],[115,6],[115,6],[115,8],[107,5],[107,6],[107,6],[111,5],[45,2],[109,2],[44,3],[44,2],[44,4],[44,3],[120,4],[120,3],[30,3],[30,1],[40,1],[40,1],[70,1],[70,1],[70,1],[70,1],[70,1],[12,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: 'S', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 2:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 3:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 23:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 24:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 25:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION_EXP', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 26:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION_EXP', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 27:
 this.$ = new NodoAST({label: 'GRAFICAR_TS', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 28:
 this.$ = new NodoAST({label: 'WHILE', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 29:
 this.$ = new NodoAST({label: 'DO_WHILE', hijos: [$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 30: case 31:
 this.$ = new NodoAST({label: 'FOR', hijos: [$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 32:
 this.$ = new NodoAST({label: 'FOR_OF', hijos: [$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 33:
 this.$ = new NodoAST({label: 'FOR_IN', hijos: [$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 34: case 36:
 this.$ = new NodoAST({label: 'ASIGNACION', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 35:
 this.$ = new NodoAST({label: 'ASIGNACION', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 37:
 this.$ = new NodoAST({label: 'TIPO_IGUAL', hijos: [$$[$0]], linea: yylineno}); 
break;
case 38: case 39:
 this.$ = new NodoAST({label: 'TIPO_IGUAL', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 40:
 this.$ = new NodoAST({label: 'ASIGNACION_FOR', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 41: case 42:
 this.$ = new NodoAST({label: 'ASIGNACION_FOR', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 43:
 this.$ = new NodoAST({label: 'SWITCH', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 44: case 47:
 this.$ = new NodoAST({label: 'LISTA_CASE', hijos: [...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 45: case 46:
 this.$ = new NodoAST({label: 'LISTA_CASE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 48:
 this.$ = new NodoAST({label: 'CASE', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 49:
 this.$ = new NodoAST({label: 'DEFAULT', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 50:
 this.$ = new NodoAST({label: 'CONTINUE', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 51:
 this.$ = new NodoAST({label: 'BREAK', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 52:
 this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 53:
 this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 54:
 this.$ = new NodoAST({label: 'INSTRUCCION_IF', hijos: [$$[$0]], linea: yylineno}); 
break;
case 55: case 56:
 this.$ = new NodoAST({label: 'INSTRUCCION_IF', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 57:
 this.$ = new NodoAST({label: 'INSTRUCCION_IF', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 58:
 this.$ = new NodoAST({label: 'IF', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 59:
 this.$ = new NodoAST({label: 'ELSE', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 60:
 this.$ = new NodoAST({label: 'ELSE_IF', hijos: [$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 61:
 this.$ = new NodoAST({label: 'LISTA_ELSE_IF', hijos: [...$$[$0-1].hijos, $$[$0]], linea: yylineno}); 
break;
case 62:
 this.$ = new NodoAST({label: 'LISTA_ELSE_IF', hijos: [$$[$0]], linea: yylineno}); 
break;
case 63:
 this.$ = new NodoAST({label: 'PUSH_ARREGLO', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 64:
 this.$ = new NodoAST({label: 'PUSH_ARREGLO', hijos: [$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 65:
 this.$ = new NodoAST({label: 'DECLARACION_FUNCION', hijos: [$$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 66: case 68:
 this.$ = new NodoAST({label: 'DECLARACION_FUNCION', hijos: [$$[$0-9], $$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 67:
 this.$ = new NodoAST({label: 'DECLARACION_FUNCION', hijos: [$$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 69:
 this.$ = new NodoAST({label: 'DECLARACION_FUNCION', hijos: [$$[$0-10], $$[$0-9], $$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 70:
 this.$ = new NodoAST({label: 'DECLARACION_FUNCION', hijos: [$$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 71:
 this.$ = new NodoAST({label: 'LISTA_PARAMETROS', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 72:
 this.$ = new NodoAST({label: 'LISTA_PARAMETROS', hijos: [$$[$0]], linea: yylineno}); 
break;
case 73:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [$$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 74:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 75:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 76:
 this.$ = new NodoAST({label: 'DECLARACION_TYPE', hijos: [$$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 77:
 this.$ = new NodoAST({label: 'DECLARACION_TYPE', hijos: [$$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 78:
 this.$ = new NodoAST({label: 'LISTA_ATRIBUTOS', hijos: [$$[$0-2],$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 79:
 this.$ = new NodoAST({label: 'LISTA_ATRIBUTOS', hijos: [$$[$0]], linea: yylineno}); 
break;
case 80:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 81:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 82:
 this.$ = new NodoAST({label: 'DECLARACION_VARIABLE', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno});  
break;
case 83: case 84: case 85: case 86: case 87: case 88:
 this.$ = new NodoAST({label: 'LISTA_DECLARACIONES', hijos: [...$$[$0-2].hijos,$$[$0]], linea: yylineno}); 
break;
case 89: case 90: case 91: case 92:
 this.$ = new NodoAST({label: 'LISTA_DECLARACIONES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 93:
 this.$ = new NodoAST({label: 'DEC_ID_TIPO_CORCHETES_EXP', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 94:
 this.$ = new NodoAST({label: 'DEC_ID_TIPO_EXP', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 95:
 this.$ = new NodoAST({label: 'DEC_ID_TIPO', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 96:
 this.$ = new NodoAST({label: 'DEC_ID_TIPO_CORCHETES', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 97:
 this.$ = new NodoAST({label: 'LISTA_CORCHETES', hijos: [...$$[$0-2].hijos, '[]'], linea: yylineno}); 
break;
case 98:
 this.$ = new NodoAST({label: 'LISTA_CORCHETES', hijos: ['[]'], linea: yylineno}); 
break;
case 99: case 100:
 this.$ = new NodoAST({label: 'INCREMENTO_DECREMENTO', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 101: case 108: case 109: case 119:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 102: case 103: case 104: case 105: case 106: case 107: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 120:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'NUMBER', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 121:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'STRING', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 122:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'ID', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 123: case 124:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'BOOLEAN', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 125:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'NULL', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 126:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 127:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0]], linea: yylineno}); 
break;
case 140:
 this.$ = new NodoAST({label: 'NEW_ARRAY', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 141:
 this.$ = new NodoAST({label: 'TYPE', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 142:
 this.$ = new NodoAST({label: 'ATRIBUTOS_TYPE', hijos: [$$[$0-2],$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 143:
 this.$ = new NodoAST({label: 'ATRIBUTOS_TYPE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 144:
 this.$ = new NodoAST({label: 'ATRIBUTO_TYPE', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 145:
 this.$ = new NodoAST({label: 'LENGTH', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 146:
 this.$ = new NodoAST({label: 'LENGTH', hijos: [new NodoAST({label: 'STRING', hijos: [$$[$0-2]], linea: yylineno}),$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 147:
 this.$ = new NodoAST({label: 'LENGTH', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 148: case 149:
 this.$ = new NodoAST({label: 'LENGTH', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 150:
 this.$ = new NodoAST({label: 'CHAR_AT', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 151:
 this.$ = new NodoAST({label: 'CHAR_AT', hijos: [new NodoAST({label: 'STRING', hijos: [$$[$0-5]], linea: yylineno}),$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 152:
 this.$ = new NodoAST({label: 'CHAR_AT', hijos: [$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 153:
 this.$ = new NodoAST({label: 'TO_LOWER_CASE', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 154:
 this.$ = new NodoAST({label: 'TO_LOWER_CASE', hijos: [new NodoAST({label: 'STRING', hijos: [$$[$0-4]], linea: yylineno}),$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 155:
 this.$ = new NodoAST({label: 'TO_LOWER_CASE', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 156:
 this.$ = new NodoAST({label: 'TO_UPPER_CASE', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 157:
 this.$ = new NodoAST({label: 'TO_UPPER_CASE', hijos: [new NodoAST({label: 'STRING', hijos: [$$[$0-4]], linea: yylineno}),$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 158:
 this.$ = new NodoAST({label: 'TO_UPPER_CASE', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 159:
 this.$ = new NodoAST({label: 'CONCAT', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 160:
 this.$ = new NodoAST({label: 'CONCAT', hijos: [new NodoAST({label: 'STRING', hijos: [$$[$0-5]], linea: yylineno}),$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 161:
 this.$ = new NodoAST({label: 'CONCAT', hijos: [$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 162:
 this.$ = new NodoAST({label: 'ARRAY_POP', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 163: case 164:
 this.$ = new NodoAST({label: 'ARRAY_POP', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 165:
 this.$ = new NodoAST({label: 'TERNARIO', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 166:
 this.$ = new NodoAST({label: 'ACCESO_ARREGLO', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 167:
 this.$ = new NodoAST({label: 'ACCESO_TYPE', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 168:
 this.$ = new NodoAST({label: 'LISTA_ACCESOS_TYPE', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 169:
 this.$ = new NodoAST({label: 'LISTA_ACCESOS_TYPE', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 170:
 this.$ = new NodoAST({label: 'LISTA_ACCESOS_TYPE', hijos: [...$$[$0-3].hijos,$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 171:
 this.$ = new NodoAST({label: 'LISTA_ACCESOS_TYPE', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 172:
 this.$ = new NodoAST({label: 'LISTA_ACCESOS_ARREGLO', hijos: [...$$[$0-3].hijos,$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 173:
 this.$ = new NodoAST({label: 'LISTA_ACCESOS_ARREGLO', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 174:
 this.$ = new NodoAST({label: 'LISTA_EXPRESIONES', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 175:
 this.$ = new NodoAST({label: 'LISTA_EXPRESIONES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 176: case 177:
 this.$ = new NodoAST({label: 'TIPO_DEC_VARIABLE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 178: case 179: case 180: case 181:
 this.$ = new NodoAST({label: 'TIPO_VARIABLE_NATIVA', hijos: [$$[$0]], linea: yylineno}); 
break;
case 182:
 this.$ = new NodoAST({label: 'TIPO_VARIABLE_NATIVA', hijos: [new NodoAST({label: 'ID', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 183:
 this.$ = new NodoAST({label: 'CONSOLE_LOG', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{1:[3]},{5:[1,41],6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,22]),{26:$Vg,81:43,83:44,84:45,86:46,87:47},{26:[1,49]},{26:[1,50]},{27:[1,54],43:51,44:52,46:$Vh,47:$Vi,48:$Vj,49:[1,55],50:[1,56],67:[1,53],88:$Vk,120:57},{43:62,46:$Vh,47:$Vi,48:$Vj},{67:[1,63]},o($Vf,[2,54],{62:64,63:65,66:67,65:$Vl}),{27:[1,68]},{29:[1,69]},{26:$Vm,27:$Vn,29:[1,71],31:89,34:70,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{29:[1,96]},{27:[1,97]},{35:[1,98]},{27:[1,99]},{27:[1,100]},{26:[2,176]},{26:[2,177]},{27:[1,101]},{1:[2,1]},o($Vf,[2,2]),{29:[1,102],73:[1,103]},o($Vy,[2,89]),o($Vy,[2,90]),o($Vy,[2,91]),o($Vy,[2,92]),{56:$Vz},{27:[1,105]},{46:[1,106]},{26:$Vm,27:$Vn,31:89,34:107,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{43:108,46:$Vh,47:$Vi,48:$Vj,67:[1,109]},{26:$VA,68:[1,110]},{26:$Vm,27:$Vn,28:[1,112],30:113,31:89,34:114,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{29:[1,115]},{29:[1,116]},o([46,47,48],$VB,{88:$VC}),o($VD,[2,37]),{46:[1,118]},{46:[1,119]},{26:$Vm,27:$Vn,31:89,34:120,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:121,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{132:[1,122]},o($Vf,[2,55]),o($Vf,[2,56],{62:123,66:124,65:$Vl}),{35:[1,125],64:[1,126]},o($VE,[2,62]),{26:$Vm,27:$Vn,31:89,34:127,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},o($Vf,[2,51]),{29:[1,128],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},o($Vf,[2,53]),{26:$Vm,27:$Vn,31:89,34:144,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},o($VU,[2,122],{120:147,44:149,27:[1,150],49:[1,145],50:[1,146],67:[1,148],88:$Vk}),{26:$Vm,27:$Vn,31:89,34:151,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:152,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},o($VU,[2,120]),o($VU,[2,121],{67:[1,153]}),o($VU,[2,123]),o($VU,[2,124]),o($VU,[2,125]),{26:$Vm,27:$Vn,30:154,31:89,34:114,35:$Vo,45:82,48:$Vp,88:$Vq,89:[1,155],100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},o($VU,[2,128]),o($VU,[2,129]),o($VU,[2,130]),o($VU,[2,131]),o($VU,[2,132]),o($VU,[2,133]),o($VU,[2,134]),o($VU,[2,135]),o($VU,[2,136]),o($VU,[2,137]),o($VU,[2,138]),o($VU,[2,139]),{75:[1,156]},{26:$VV,117:157,118:158},o($Vf,[2,50]),{26:$Vm,27:$Vn,31:89,34:160,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{4:161,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{7:162,10:163,26:[1,165],40:164,45:27,127:$Vc,128:$Vd},{28:[1,166]},{26:$Vm,27:$Vn,31:89,34:167,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},o($VW,[2,82]),{26:$Vg,82:[1,168],83:169,84:170,85:[1,171],86:172,87:173},{26:$VX,70:174,101:$VY,102:$VZ,129:$V_,130:$V$},{26:$V01,28:[1,180],72:181,74:182},{35:[1,184]},{29:[1,185],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{26:$Vm,27:$Vn,31:89,34:186,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$V11,68:[1,187]},{27:[1,189]},o($V21,[2,169],{120:190,88:$Vk}),{29:[1,191]},{28:[1,192],73:$V31},o($V41,[2,175],{47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT}),o($Vf,[2,99]),o($Vf,[2,100]),{26:$Vm,27:$Vn,31:89,34:194,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},o($VD,[2,38]),o($VD,[2,39]),{47:$VF,48:$VG,76:$VH,77:$VI,89:[1,195],90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{29:[1,196],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{27:[1,197]},o($Vf,[2,57]),o($VE,[2,61]),{4:198,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{27:[1,199]},{28:[1,200],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},o($Vf,[2,52]),{26:$Vm,27:$Vn,31:89,34:201,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:202,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:203,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:204,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:205,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:206,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:207,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:208,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:209,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:210,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:211,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:212,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:213,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:214,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:215,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},o($V51,[2,101],{93:$VM}),o($VU,[2,108]),o($VU,[2,109]),o($VU,$VB,{67:[1,216],88:$VC}),{26:$VA,119:[1,217],121:[1,219],122:[1,220],123:[1,221],124:[1,222],125:[1,218]},o($VU,[2,167],{67:[1,223]}),{26:$Vm,27:$Vn,28:[1,224],30:225,31:89,34:114,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{28:[1,226],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},o($VU,[2,119]),{119:[1,227],121:[1,228],122:[1,229],123:[1,230],124:[1,231]},{73:$V31,89:[1,232]},o($VU,[2,127]),{27:[1,233]},{36:[1,234]},{36:[2,143],73:[1,235]},{56:[1,236]},{28:[1,237],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,238],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{26:$Vm,27:$Vn,31:89,34:239,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:240,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:[1,241],81:43,83:44,84:45,86:46,87:47},{43:51,44:242,46:$Vh,47:$Vi,48:$Vj,67:[1,243],88:$Vk,120:57},{29:[1,244]},{28:[1,245],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},o($Vy,[2,83]),o($Vy,[2,84]),o($Vy,[2,85]),o($Vy,[2,86]),o($Vy,[2,87]),o($Vy,[2,88]),o($Vy,[2,95],{71:246,46:[1,247],88:$V61}),o($V71,[2,178]),o($V71,[2,179]),o($V71,[2,180]),o($V71,[2,181]),o($V71,[2,182]),{35:[1,250],56:[1,249]},{28:[1,251],73:[1,252]},o($V81,[2,72]),{56:[1,253]},{26:$V91,79:254,80:255},o($VW,[2,34]),{29:[1,257],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{27:[1,258]},o($V21,[2,168],{120:259,88:$Vk}),{26:$Vm,27:$Vn,31:89,34:260,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},o($V21,[2,171],{88:$VC}),o($Vf,[2,23]),{29:[1,261]},{26:$Vm,27:$Vn,31:89,34:262,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{47:$VF,48:$VG,76:$VH,77:$VI,89:[1,263],90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},o($Va1,[2,173]),o($VW,[2,36]),{26:$Vm,27:$Vn,30:264,31:89,34:114,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,265],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{26:$Vm,27:$Vn,31:89,34:266,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{35:[1,267]},o($Vb1,[2,102],{90:$VJ,91:$VK,92:$VL,93:$VM}),o($Vb1,[2,103],{90:$VJ,91:$VK,92:$VL,93:$VM}),o($V51,[2,104],{93:$VM}),o($V51,[2,105],{93:$VM}),o($V51,[2,106],{93:$VM}),o($V51,[2,107],{93:$VM}),o($Vc1,[2,111],{47:$VF,48:$VG,90:$VJ,91:$VK,92:$VL,93:$VM}),o($Vc1,[2,112],{47:$VF,48:$VG,90:$VJ,91:$VK,92:$VL,93:$VM}),o($Vc1,[2,113],{47:$VF,48:$VG,90:$VJ,91:$VK,92:$VL,93:$VM}),o($Vc1,[2,114],{47:$VF,48:$VG,90:$VJ,91:$VK,92:$VL,93:$VM}),o($Vd1,[2,115],{47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO}),o($Vd1,[2,116],{47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO}),o([28,29,36,56,73,89,98,99,126],[2,117],{47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ}),o([28,29,36,56,73,89,99,126],[2,118],{47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR}),{47:$VF,48:$VG,56:[1,268],76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{119:[1,269],125:[1,270]},o($VU,[2,145]),{27:[1,271]},{27:[1,272]},{27:[1,273]},{27:[1,274]},{27:[1,275]},{26:$V11,119:[1,276],125:[1,277]},o($VU,[2,25]),{28:[1,278],73:$V31},o($VU,[2,110],{67:[1,279]}),o($VU,[2,146]),{27:[1,280]},{27:[1,281]},{27:[1,282]},{27:[1,283]},o($VU,[2,126]),{26:$Vm,27:$Vn,31:89,34:284,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},o($VU,[2,141]),{26:$VV,117:285,118:158},{26:$Vm,27:$Vn,31:89,34:286,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{35:[1,287]},{33:[1,288]},{29:[1,289],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{29:[1,290],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{41:[1,291],42:[1,292],56:$Vz},{43:108,46:$Vh,47:$Vi,48:$Vj,67:[1,293]},{26:$VA},o($Vf,[2,27]),{35:[1,294]},o($Vy,[2,96],{46:[1,295],88:$Ve1}),{26:$Vm,27:$Vn,31:89,34:297,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{89:[1,298]},{26:$VX,70:299,101:$VY,102:$VZ,129:$V_,130:$V$},{4:300,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{35:[1,302],56:[1,301]},{26:$V01,74:303},{26:$VX,70:304,75:[1,305],101:$VY,102:$VZ,129:$V_,130:$V$},{36:[1,306]},{36:[2,79],73:[1,307]},{56:[1,308]},o($VW,[2,35]),{26:$Vm,27:$Vn,31:89,34:309,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},o($V21,[2,170],{88:$VC}),{28:[1,310],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},o($Vf,[2,24]),o($V41,[2,174],{47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT}),o($Va1,[2,172]),{28:[1,311],73:$V31},o($Vf,[2,59]),{28:[1,312],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{52:313,53:314,54:315,55:$Vf1,57:$Vg1},{26:$Vm,27:$Vn,31:89,34:318,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},o($VU,[2,148]),{27:[1,319]},{28:[1,320]},{26:$Vm,27:$Vn,31:89,34:321,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{28:[1,322]},{28:[1,323]},{26:$Vm,27:$Vn,31:89,34:324,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},o($VU,[2,149]),{27:[1,325]},o($VU,[2,26]),{119:[1,326],121:[1,327],122:[1,328],123:[1,329],124:[1,330]},{26:$Vm,27:$Vn,31:89,34:331,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{28:[1,332]},{28:[1,333]},{26:$Vm,27:$Vn,31:89,34:334,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{28:[1,335],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{36:[2,142]},o($Vh1,[2,144],{47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT}),{4:336,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{27:[1,337]},{26:$Vi1,39:338},{26:$Vi1,39:340},{26:$Vm,27:$Vn,31:89,34:341,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$Vm,27:$Vn,31:89,34:342,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{26:$V11},{4:343,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{26:$Vm,27:$Vn,31:89,34:344,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{89:[1,345]},o($Vy,[2,94],{47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT}),o($Vj1,[2,98]),{35:[1,346],71:347,88:$V61},{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,348],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{26:$VX,70:349,101:$VY,102:$VZ,129:$V_,130:$V$},{4:350,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},o($V81,[2,71]),o($V81,[2,73],{71:351,88:$V61}),{76:[1,352]},o($Vf,[2,76],{29:[1,353]}),{26:$V91,79:354,80:255},{26:$VX,70:355,101:$VY,102:$VZ,129:$V_,130:$V$},{28:[1,356],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{29:[1,357]},{29:[1,358]},{35:[1,359]},{36:[1,360],53:361,54:362,55:$Vf1,57:$Vg1},o($Vk1,[2,45]),o($Vk1,[2,46]),{26:$Vm,27:$Vn,31:89,34:363,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{56:[1,364]},o([28,29,36,56,73,89,126],[2,165],{47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS}),{28:[1,365]},o($VU,[2,162]),{28:[1,366],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},o($VU,[2,153]),o($VU,[2,156]),{28:[1,367],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{28:[1,368]},o($VU,[2,147]),{27:[1,369]},{27:[1,370]},{27:[1,371]},{27:[1,372]},{28:[1,373],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},o($VU,[2,154]),o($VU,[2,157]),{28:[1,374],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},o($VU,[2,140]),{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,375],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{26:$Vm,27:$Vn,31:89,34:376,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{28:[1,377]},{43:378,46:$Vh,47:$Vi,48:$Vj,49:[1,379],50:[1,380]},{28:[1,381]},{28:[1,382],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{28:[1,383],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,384],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},o($Vy,[2,93],{47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT}),o($Vj1,[2,97]),{4:385,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{35:[1,386],88:$Ve1},o($Vf,[2,67]),{35:[1,387],71:388,88:$V61},{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,389],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},o($V81,[2,74],{88:$Ve1}),{26:$VX,70:390,101:$VY,102:$VZ,129:$V_,130:$V$},o($Vf,[2,77]),{36:[2,78]},o($Vh1,[2,80],{71:391,88:$V61}),{29:[1,392]},o($Vf,[2,63]),o($Vf,[2,183]),{4:393,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},o($Vf,[2,43]),o($Vk1,[2,44]),o($Vk1,[2,47]),{47:$VF,48:$VG,56:[1,394],76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{4:395,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},o($VU,[2,163]),o($VU,[2,150]),o($VU,[2,159]),o($VU,[2,164]),{26:$Vm,27:$Vn,31:89,34:396,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{28:[1,397]},{28:[1,398]},{26:$Vm,27:$Vn,31:89,34:399,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},o($VU,[2,151]),o($VU,[2,160]),o($Vf,[2,28]),{28:[1,400],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{35:[1,401]},{26:$Vm,27:$Vn,31:89,34:402,35:$Vo,45:82,48:$Vp,88:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:83,107:84,108:85,109:86,110:87,111:88,112:90,113:91,114:92,115:93,116:$Vx},{28:[2,41]},{28:[2,42]},{35:[1,403]},{35:[1,404]},{35:[1,405]},o($VE,[2,58]),{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,406],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{4:407,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{4:408,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{35:[1,409],88:$Ve1},o($Vf,[2,70]),{77:[1,410]},o($Vh1,[2,81],{88:$Ve1}),o($Vf,[2,64]),{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,411],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{4:412,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},o($Vk1,[2,49],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,40:23,45:27,61:29,6:42,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,51:$V5,58:$V6,59:$V7,60:$V8,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve}),{28:[1,413],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},o($VU,[2,155]),o($VU,[2,158]),{28:[1,414],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{29:[1,415]},{4:416,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{28:[2,40],47:$VF,48:$VG,76:$VH,77:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,126:$VT},{4:417,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{4:418,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{4:419,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},o($Vf,[2,65]),{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,420],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,421],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{4:422,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},o($V81,[2,75]),o($VE,[2,60]),o($Vk1,[2,48],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,40:23,45:27,61:29,6:42,26:$V0,32:$V1,33:$V2,37:$V3,38:$V4,51:$V5,58:$V6,59:$V7,60:$V8,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve}),o($VU,[2,152]),o($VU,[2,161]),o($Vf,[2,29]),{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,423],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,424],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,425],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,426],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},o($Vf,[2,66]),o($Vf,[2,68]),{6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V0,32:$V1,33:$V2,36:[1,427],37:$V3,38:$V4,40:23,45:27,51:$V5,58:$V6,59:$V7,60:$V8,61:29,64:$V9,69:$Va,78:$Vb,127:$Vc,128:$Vd,131:$Ve},o($Vf,[2,30]),o($Vf,[2,31]),o($Vf,[2,32]),o($Vf,[2,33]),o($Vf,[2,69])],
defaultActions: {38:[2,176],39:[2,177],41:[2,1],285:[2,142],354:[2,78],379:[2,41],380:[2,42]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const { NodoAST } = require('../arbol/nodoAST');
  const error_1 = require("../arbol/error");
  const errores_1 = require("../arbol/errores");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// espacios en blanco
break;
case 1:// comentario simple
break;
case 2:// comentario multiple líneas
break;
case 3:return 102;
break;
case 4:return 101;
break;
case 5:return 129;
break;
case 6:return 130;
break;
case 7:return 78;
break;
case 8:return 127;
break;
case 9:return 128;
break;
case 10:return 131;
break;
case 11:return 132;
break;
case 12:return 69;
break;
case 13:return 60;
break;
case 14:return 105;
break;
case 15:return 68;
break;
case 16:return 119;
break;
case 17:return 125;
break;
case 18:return 64;
break;
case 19:return 65;
break;
case 20:return 103;
break;
case 21:return 104;
break;
case 22:return 59;
break;
case 23:return 51;
break;
case 24:return 55;
break;
case 25:return 57;
break;
case 26:return 58;
break;
case 27:return 33;
break;
case 28:return 37;
break;
case 29:return 38;
break;
case 30:return 42;
break;
case 31:return 41;
break;
case 32:return 32;
break;
case 33:return 75;
break;
case 34:return 121;
break;
case 35:return 122;
break;
case 36:return 123;
break;
case 37:return 124;
break;
case 38:return 116;
break;
case 39:return 29;
break;
case 40:return 73;
break;
case 41:return 56;
break;
case 42:return 35;
break;
case 43:return 36;
break;
case 44:return 27;
break;
case 45:return 28;
break;
case 46:return 88;
break;
case 47:return 89;
break;
case 48:return 67;
break;
case 49:return 49
break;
case 50:return 47;
break;
case 51:return 50
break;
case 52:return 48;
break;
case 53:return 93;
break;
case 54:return 90;
break;
case 55:return 91;
break;
case 56:return 92;
break;
case 57:return 95;
break;
case 58:return 94;
break;
case 59:return 77;
break;
case 60:return 76;
break;
case 61:return 96;
break;
case 62:return 46;
break;
case 63:return 97;
break;
case 64:return 98;
break;
case 65:return 99;
break;
case 66:return 100;
break;
case 67:return 126;
break;
case 68: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 102; 
break;
case 69: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 102; 
break;
case 70: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 102; 
break;
case 71:return 101;
break;
case 72:return 26;
break;
case 73:return 5;
break;
case 74:
  const er = new error_1.Error({ tipo: 'lexico', linea: `${yy_.yylineno + 1}`, descripcion: `El valor "${yy_.yytext}" no es valido, columna: ${yy_.yylloc.first_column + 1}` });
  errores_1.Errores.getInstance().push(er);
  
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:type\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:null\b)/i,/^(?:push\b)/i,/^(?:length\b)/i,/^(?:pop\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:break\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:graficar_ts\b)/i,/^(?:Array\b)/i,/^(?:charat\b)/i,/^(?:ToLowerCase\b)/i,/^(?:ToUpperCase\b)/i,/^(?:concat\b)/i,/^(?:new\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:`[^\`]*`)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}